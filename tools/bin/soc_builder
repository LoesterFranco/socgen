eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*  Traverse a socgen project and build the rtl code                  */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010>  <Ouabache Design Works>                   */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/


$root = "projects";
$dest = "work";
$cde="cde";

use Cwd;
use XML::LibXML;

$home = cwd();



print "Building socgen rtl  for  $home  \n" ;


sub trim_sort {
   my @output_files  = @_;
   my %trim = ();
   foreach $descriptor (@output_files) { $trim{$descriptor}  = 1; }
   my @k = keys %trim;
   @output_files =  sort(sort @k);  
   return(@output_files);
   }





@projects = qx(ls  $home/work    );







foreach my $project (@projects) 
       {        
       chomp($project);
        @kids =();
        my @components = qx(ls  ${home}/work/${project}/ip    );
        foreach my $component (@components) 
         {
         chomp($component);

         my @xml_files = qx(ls  ${home}/work/${project}/ip/${component}/rtl/xml    );
           foreach my $xml_file (@xml_files) 
           {
           chomp($xml_file);

           my $filename= "${home}/work/${project}/ip/${component}/rtl/xml/${xml_file}";

           my $parser = XML::LibXML->new();
           my $doc    = $parser->parse_file($filename);
           foreach my $comp ($doc->findnodes('/components/component')) 
             {
             my($name)  = $comp->findnodes('./name/text()')->to_literal ;
             push @kids , "work/${project}/ip/${component}/rtl/xml/${xml_file}";

            foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/children/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_family)  = $i_name ->findnodes('../family/text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 push @kids , "work/${project}/children/${child_family}/ip/${child_parent}/rtl/xml/${child}.xml";

               }


            foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/syn_children/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_family)  = $i_name ->findnodes('../family/text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 push @kids , "work/${project}/children/${child_family}/ip/${child_parent}/rtl/xml/${child}.xml";

               }





             }
           }

         }




   @kids =  trim_sort(@kids);  




         foreach my $kid (@kids)
           {

           $_ = $kid;
           if(/(\S+)\/rtl\/xml\/(\w+).xml/) { 

             $prefix = $1;
             $variant = $2;        
          }




           my $parser = XML::LibXML->new();
           my $doc    = $parser->parse_file($kid);
           foreach my $comp ($doc->findnodes('/components/component')) 
             {
             my($name)  = $comp->findnodes('./name/text()')->to_literal ;

             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/fsms/fsm/name"))
               {
                 my($fsm_name)      = $i_name ->findnodes('./text()')->to_literal ;
                 my($fsm_type)      = $i_name ->findnodes('../type/text()')->to_literal ;
                 my($fsm_location)  = $i_name ->findnodes('../location/text()')->to_literal ;
                 my($fsm_gen1)      = $i_name ->findnodes('../gen1/text()')->to_literal ;
                 my($fsm_gen2)      = $i_name ->findnodes('../gen2/text()')->to_literal ;
                 my($fsm_gen3)      = $i_name ->findnodes('../gen3/text()')->to_literal ;
                 $cmd ="${home}/${prefix}/../..${fsm_gen1} <${home}/${prefix}${fsm_gen2}  >${home}/${prefix}${fsm_gen3}";
                 if (system($cmd)) {}
                 print "FSM    $prefix  $variant \n";
               }
             }




          print "BUILD HW         $prefix\n     $variant\n"; 

          $cmd ="cp  ${home}/${prefix}/rtl/variants/${variant}/defines.v  .";
          if (system($cmd)) {}

          $cmd ="cp ${home}/${prefix}/doc/copyright.v    ${home}/${prefix}/rtl/gen/sim/${variant}.v";
          if (system($cmd)) {}

          $cmd ="vppreproc --noline --noblank  -DVARIANT=${variant} -DCDE=${cde}     ./defines.v  ${home}/${prefix}/rtl/verilog/*.v >>  ${home}/${prefix}/rtl/gen/sim/${variant}.v";
          if (system($cmd)) {}

          $cmd ="cp ${home}/${prefix}/doc/copyright.v    ${home}/${prefix}/rtl/gen/syn/${variant}.v";
          if (system($cmd)) {}

          $cmd ="vppreproc --noline --noblank -DSYNTHESIS -DVARIANT=${variant} -DCDE=${cde} ./defines.v  ${home}/${prefix}/rtl/verilog/*.v >>  ${home}/${prefix}/rtl/gen/syn/${variant}.v";
          if (system($cmd)) {}

          $cmd ="rm   ./defines.v ";
          if (system($cmd)) {}

           }


       }











