eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*  Traverse a socgen project and link it                             */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010>  <Ouabache Design Works>                   */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/


$root = "projects";



use Cwd;
use XML::LibXML;


$home = cwd();

@target_list =  ( );

print "Building socgen work area for     $home  \n" ;


&link_sub( $root,$root, "work" );

@projects = qx(ls  $home/work    );


print "Linking testbench \n" ;


foreach my $project (@projects) 
       {        
       chomp($project);
        my @components = qx(ls  ${home}/work/${project}/ip    );
        foreach my $component (@components) 
         {
         chomp($component);
           $root = "bench";
           $dest = "work/${project}/ip/${component}/sim/bench";
           &link_sub( $root,$root, $dest );

           $root = "lib";
           $dest = "work/${project}/ip/${component}/sim/lib";
           &link_sub( $root,$root, $dest );
         }
       }

print "Done \n" ;


print "Linking  children \n" ;

foreach my $project (@projects) 
       {        
       chomp($project);
       symlink( "${home}/tools/bin/Makefile.root", "${home}/work/${project}/bin/Makefile.root");
       symlink( "${home}/tools/bin/Makefile",      "${home}/work/${project}/bin/Makefile");

        my @components = qx(ls  ${home}/work/${project}/ip    );
        foreach my $component (@components) 
         {
         chomp($component);
         my @xml_files = qx(ls  ${home}/work/${project}/ip/${component}/rtl/xml    );
           foreach my $xml_file (@xml_files) 
           {
           chomp($xml_file);
           my $filename= "${home}/work/${project}/ip/${component}/rtl/xml/${xml_file}";

           my $parser = XML::LibXML->new();
           my $doc    = $parser->parse_file($filename);
           foreach my $comp ($doc->findnodes('/components/component')) 
             {

             my($name)  = $comp->findnodes('./name/text()')->to_literal ;
             my($variant)  = $comp->findnodes('./variant/text()')->to_literal ;


             print "making rt/gen directories  for   $project  $component  $name\n"; 

             print "     work/${project}/ip/${component}/rtl/\n";
 
             my $path  = "work/${project}/ip/${component}/rtl/gen";
             print "Creating    $path\n"  unless( -e $path );
             mkdir $path,0755             unless( -e $path );

             my $path  = "work/${project}/ip/${component}/rtl/gen/sim";
             print "Creating    $path\n"  unless( -e $path );
             mkdir $path,0755             unless( -e $path );

             my $path  = "work/${project}/ip/${component}/rtl/gen/syn";
             print "Creating    $path\n"  unless( -e $path );
             mkdir $path,0755             unless( -e $path );









             print "CREATING sim and cov filelists for   $project   $component  $name $variant \n"; 

               
             my $outfile ="work/${project}/ip/${component}/sim/cov/${variant}/filelist.cov";
             open COVFILE,">$outfile" or die "unable to open $outfile";
             print COVFILE "\`include \"../../../rtl/gen/syn/${variant}.v\" \n";

             $outfile ="work/${project}/ip/${component}/sim/cov/${variant}/filelist.sim";
             open SIMFILE,">$outfile" or die "unable to open $outfile";
             print SIMFILE "\`include \"../../../rtl/gen/sim/${variant}.v\" \n";


             $outfile ="work/${project}/ip/${component}/sim/cov/${variant}/filelist.syn";
             open SYNFILE,">$outfile" or die "unable to open $outfile";
             print SYNFILE "verilog work    ../../../../../ip/${component}/rtl/gen/syn/${variant}.v  \n";

             

             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/brothers/brother/variant"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../component/text()')->to_literal ;
                 print COVFILE  "\`include \"../../../../${child_parent}/rtl/gen/syn/${child}.v\"\n";
                 print SIMFILE  "\`include \"../../../../${child_parent}/rtl/gen/sim/${child}.v\"\n";
                 print SYNFILE  "verilog work    ../../../../../ip/${child_parent}/rtl/gen/syn/${child}.v\n";
               }


             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/children/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 my($child_family)  = $i_name ->findnodes('../family/text()')->to_literal ;
                 print COVFILE  "\`include \"../../../../../children/${child_family}/ip/${child_parent}/rtl/gen/syn/${child}.v\"\n";
                 print SIMFILE  "\`include \"../../../../../children/${child_family}/ip/${child_parent}/rtl/gen/sim/${child}.v\"\n";
                 print SYNFILE  "verilog work    ../../../../../children/${child_family}/ip/${child_parent}/rtl/gen/syn/${child}.v\n";
               }


             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/library/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 print COVFILE  "\`include \"../../lib/${child_parent}/${child}.v\"\n";
                 print SIMFILE  "\`include \"../../lib/${child_parent}/${child}.v\"\n";
                 print SYNFILE  "verilog work    ./target/lib/syn/${child_parent}/${child}.v\n";
               }



     




             print "CREATING dut    for   $project   $component  $name $variant \n"; 

               
             my $outfile ="work/${project}/ip/${component}/sim/cov/${variant}/dut";
             open DUTFILE,">$outfile" or die "unable to open $outfile";



             

             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/interfaces/interface/name"))
               {
                 my($interface_name)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($width)      = $i_name ->findnodes('../width/text()')->to_literal ;
                 print DUTFILE  "wire    ${width}      ${interface_name};\n";
               }


                 print DUTFILE  "\n\n\n  $variant \n dut \n (   \n";


                  my $first = 1;
             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/interfaces/interface/name"))
               {
   
                 my($interface_name)  = $i_name ->findnodes('./text()')->to_literal ;
                 if($first)
                 {print DUTFILE  "        .${interface_name}      (${interface_name})";$first=0}
                 else
                 {print DUTFILE  ",\n        .${interface_name}   (${interface_name})";}
               }


                 print DUTFILE  "\n  );\n\n\n\n";





             print "CREATING sim filelists for   $project  $component   $chip   $name  $variant \n"; 
             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/sims/sim/name"))
               {
                 my($chip)  = $i_name ->findnodes('./text()')->to_literal ;

                 my $infile ="work/${project}/ip/${component}/sim/cov/${variant}/filelist.sim";
                 my $outfile ="work/${project}/ip/${component}/sim/run/${chip}/filelist.sim";

                 $cmd  = 
                 "cp    $infile  $outfile" ;
                 if (system($cmd)) {}
               }





             print "Linking targets for   $project  $component  $name\n"; 
             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/chips/chip/name"))
               {
                 my($chip)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($chip_target)  = $i_name ->findnodes('../target/text()')->to_literal ;
                 print "     work/${project}/ip/${component}/syn/${chip}/target/${chip_target}\n";


                 $cmd = "cp  work/${project}/ip/${component}/sim/cov/${variant}/filelist.syn  ${home}/work/${project}/ip/${component}/syn/${chip}/filelist.syn" ;
                 if (system($cmd)) {}

                 my $path  = "work/${project}/ip/${component}/syn/${chip}/target";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );






             &link_dir( "${home}/targets/${chip_target}", "${home}/work/${project}/ip/${component}/syn/${chip}/target"  );

             &link_dir( "${home}/lib",          "${home}/work/${project}/ip/${component}/syn/${chip}/target/lib/syn"  );

                 push @target_list ,$chip_target ;

                }



             print "Linking children for   $project  $component  $name\n"; 
             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/children/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 my($child_family)  = $i_name ->findnodes('../family/text()')->to_literal ;

                 my $path  = "work/${project}/children";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}/bin";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );




                 $root = "${home}/projects/${child_family}/bin";
                 $dest = "${home}/work/${project}/children/${child_family}/bin";
                 &link_dir( "$root", "$dest"  );


                 symlink( "${home}/tools/bin/Makefile.root", "${home}/work/${project}/children/${child_family}/bin/Makefile.root");
                 symlink( "${home}/tools/bin/Makefile",      "${home}/work/${project}/children/${child_family}/bin/Makefile");

                 my $path  = "work/${project}/children/${child_family}/sw";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 $root = "${home}/projects/${child_family}/sw";
                 $dest = "${home}/work/${project}/children/${child_family}/sw";
                 &link_dir( "$root", "$dest"  );



                 my $path  = "work/${project}/children/${child_family}/ip";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}/ip/${child_parent}";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 $root = "${home}/projects/${child_family}/ip/${child_parent}";
                 $dest = "${home}/work/${project}/children/${child_family}/ip/${child_parent}";
                 &link_dir( "$root", "$dest"  );


                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen/sim";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen/syn";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );
               }


             print "Linking syn_children for   $project  $component  $name\n"; 
             foreach  my   $i_name ($doc->findnodes("//component[name/text() = '$name']/syn_children/child/name"))
               {
                 my($child)  = $i_name ->findnodes('./text()')->to_literal ;
                 my($child_parent)  = $i_name ->findnodes('../parent/text()')->to_literal ;
                 my($child_family)  = $i_name ->findnodes('../family/text()')->to_literal ;

                 my $path  = "work/${project}/children";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}/bin";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 $root = "${home}/projects/${child_family}/bin";
                 $dest = "${home}/work/${project}/children/${child_family}/bin";
                 &link_dir( "$root", "$dest"  );

                 symlink( "${home}/tools/bin/Makefile.root", "${home}/work/${project}/children/${child_family}/bin/Makefile.root");
                 symlink( "${home}/tools/bin/Makefile",      "${home}/work/${project}/children/${child_family}/bin/Makefile");

                 my $path  = "work/${project}/children/${child_family}/sw";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 $root = "${home}/projects/${child_family}/sw";
                 $dest = "${home}/work/${project}/children/${child_family}/sw";
                 &link_dir( "$root", "$dest"  );


                 my $path  = "work/${project}/children/${child_family}/ip";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "work/${project}/children/${child_family}/ip/${child_parent}";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 $root = "${home}/projects/${child_family}/ip/${child_parent}";
                 $dest = "${home}/work/${project}/children/${child_family}/ip/${child_parent}";
                 &link_dir( "$root", "$dest"  );



                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen/sim";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );

                 my $path  = "${home}/work/${project}/children/${child_family}/ip/${child_parent}/rtl/gen/syn";
                 print "Creating    $path\n"  unless( -e $path );
                 mkdir $path,0755             unless( -e $path );
               }





             }
           }
         }
       }



@target_list = trim_sort(@target_list);

foreach my $target (@target_list)
{
print "Target  $target \n" ;
}


print "Done \n" ;





 
# recursively map directory information 

sub link_sub {
    my $root = shift;
    my $path = shift;
    my $dest = shift;
    return unless( -e $path );
 



   my $dest_path = $path;
      $dest_path =~ s/$root/$dest/;


    if( -d $path ) {
        print "Creating    $dest_path\n"  unless( -e $dest_path );
        mkdir $dest_path,0755;



        my @contents = (  );
        opendir( DIR, $path );
        while( my $item = readdir( DIR )) {
            next if( $item eq '.' or $item eq '..'   or $item eq '.svn'    );
            push( @contents, $item );
        }
        closedir( DIR );
 
        # recurse on items in the directory
        foreach my $item ( @contents )          { &link_sub($root, "$path/$item", $dest );}
 

    } else {
        print "Linking     $dest_path\n"  unless( -e $dest_path );
        symlink( "${home}/${path}", $dest_path);
    }
}



# recursively map directory information 

sub link_dir {
    my $src  = shift;
    my $dest = shift;
    return unless( -e $src );
 

    if( -d $src ) 
        {
        print "Creating    $dest\n"  unless( -e $dest );
        mkdir $dest,0755;
        my @contents = (  );
        opendir( DIR, $src );
        while( my $item = readdir( DIR )) 
            {
            next if( $item eq '.' or $item eq '..'   or $item eq '.svn'    );
            push( @contents, $item );
            }
        closedir( DIR );
 
        # recurse on items in the directory
        foreach my $item ( @contents )          { &link_dir("$src/$item", "$dest/$item" );}
 

       } 
       else 
       {
        symlink( "${src}", "${dest}") unless( -e "${dest}" );
       }
}





sub trim_sort {
   my @output_files  = @_;
   my %trim = ();
   foreach $descriptor (@output_files) { $trim{$descriptor}  = 1; }
   my @k = keys %trim;
   @output_files =  sort(sort @k);  
   return(@output_files);
   }
