


uart 

#(
              .PRESCALE(PRESCALE),
              .PRE_SIZE(PRE_SIZE),
              .SIZE(SIZE),
              .DIV(DIV),
              .DIV_SIZE(DIV_SIZE),
              .TX_FIFO(TX_FIFO),
              .TX_FIFO_SIZE(TX_FIFO_SIZE),
              .TX_FIFO_WORDS(TX_FIFO_WORDS),
              .RX_FIFO(RX_FIFO),
              .RX_FIFO_SIZE(RX_FIFO_SIZE),
              .RX_FIFO_WORDS(RX_FIFO_WORDS)) 
  dut(
         .clk                 ( clk                ),
         .reset               ( reset              ),
         .parity_enable       ( parity_enable      ),
         .divider_in          ( divider_in         ),
         .txd_parity          ( txd_parity         ),
         .txd_force_parity    ( txd_force_parity   ),
         .txd_data_in         ( txd_data_in        ),
         .txd_buffer_empty    ( txd_buffer_empty   ),
         .txd_load            ( txd_load           ),
         .txd_break           ( txd_break          ),
         .rxd_parity          ( rxd_parity         ),
         .rxd_force_parity    ( rxd_force_parity   ),
         .rxd_data_out        ( rxd_data_out       ),
         .rxd_data_avail      ( rxd_data_avail     ),
         .rxd_data_avail_stb  ( rxd_data_avail_stb ),
         .rxd_stop_error      ( rxd_stop_error     ),
         .rxd_parity_error    ( rxd_parity_error   ),
         .txd_pad_out         ( txd_pad_out              ),
         .rxd_pad_in          ( rxd_pad_in              ),
         .cts_pad_in          ( cts_pad_in                    ),
         .rts_pad_out         ( rts_pad_out                        ),
         .cts_out             ( cts_out                        ),
         .rts_in              (   rts_in                 )


);


assign     divider_in   =      4'b1101;

uart_host
uart_host(
         .clk                 ( clk                     ),
         .reset               ( reset                   ),
         .parity_enable       ( parity_enable      ),
         .txd_parity          ( txd_parity         ),
         .txd_force_parity    ( txd_force_parity   ),
         .txd_data_in         ( txd_data_in        ),
         .txd_buffer_empty    ( txd_buffer_empty   ),
         .txd_load            ( txd_load           ),
         .txd_break           ( txd_break          ),
         .rxd_parity          ( rxd_parity         ),
         .rxd_force_parity    ( rxd_force_parity   ),
         .rxd_data_out        ( rxd_data_out       ),
         .rxd_data_avail      ( rxd_data_avail     ),
         .rxd_data_avail_stb  ( rxd_data_avail_stb ),
         .rxd_stop_error      ( rxd_stop_error     ),
         .rxd_parity_error    ( rxd_parity_error   )
);



assign     cts_pad_in          = 1'b0 ;
assign     rts_in              = 1'b0 ;


uart_model     #(.CLKCNT(8'hbb),
                  .SIZE (8))
uart_model (
             .clk            ( clk           ),
             .reset          ( reset         ),
             .txd_in         ( txd_pad_out    ),
             .rxd_out        ( rxd_pad_in    )
        );






