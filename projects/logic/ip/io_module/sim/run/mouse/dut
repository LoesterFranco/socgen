





io_module_mouse 
#(
         .BASE_WIDTH     (BASE_WIDTH),
         .ADDR_WIDTH     (ADDR_WIDTH), 
         .NMI_MODE       (NMI_MODE),
         .IRQ_MODE       (IRQ_MODE),
         .TX_FIFO        (TX_FIFO),
         .TX_FIFO_SIZE   (TX_FIFO_SIZE),
         .TX_FIFO_WORDS  (TX_FIFO_WORDS),
         .RX_FIFO        (RX_FIFO),
         .RX_FIFO_SIZE   (RX_FIFO_SIZE),
         .RX_FIFO_WORDS  (RX_FIFO_WORDS),
         .STARTUP        ("NONE"),
         .FONT           ("NONE"))  
dut ( 
      .clk               ( clk          ),
      .reset             ( reset        ),
      .enable            ( enable       ),
      .cs_i              ( cs_i         ),
      .cs_m              ( cs_m         ),
      .wr                ( wr           ),
      .rd                ( rd           ),
      .addr              ( addr         ),
      .wdata             ( wdata        ),
      .rdata             ( rdata        ),

      .gpio_0_out        ( gpio_0_out   ),
      .gpio_0_oe         ( gpio_0_oe    ),
      .gpio_0_lat        ( gpio_0_lat   ),
      .gpio_0_in         ( gpio_0_out   ),

      .gpio_1_out        ( gpio_1_out   ),
      .gpio_1_oe         ( gpio_1_oe    ),
      .gpio_1_lat        ( gpio_1_lat   ),
      .gpio_1_in         ( gpio_1_out   ),

      .txd_pad_out       ( txd_pad_out  ),
      .rxd_pad_in        ( rxd_pad_in   ),
      .cts_pad_in        ( cts_pad_in   ),
      .rts_pad_out       ( rts_pad_out  ),
      .ext_irq_in        ( ext_irq_in   ),
      .pic_irq           ( pic_irq         ),
      .pic_nmi           ( pic_nmi         ),
      .timer_irq         ( timer_irq       ),
      .rx_irq            ( rx_irq          ),
      .tx_irq            ( tx_irq          ),
      .ps2_data_avail    ( ps2_data_avail  ),
      .ps2_clk_pad_in    ( ps2_clk_pad_in  ),
      .ps2_data_pad_in   ( ps2_data_pad_in ),
      .ps2_clk_pad_oe    ( ps2_clk_pad_oe  ),
      .ps2_data_pad_oe   ( ps2_data_pad_oe ),
      .y_pos             ( x_pos           ), 
      .x_pos             ( y_pos           ),
      .new_packet        ( new_packet      ),
      .ms_mid            ( ms_mid          ), 
      .ms_right          ( ms_right        ),  
      .ms_left           ( ms_left         )
    );



assign    enable            = 1'b1;
assign    cs_i              = 1'b1;
assign    cs_m              = 1'b0;
assign    cts_pad_in        = 1'b0;
assign    rxd_pad_in        = txd_pad_out;
assign    ext_irq_in        = {3'h0,ps2_data_avail,tx_irq,rx_irq,timer_irq};




reg  [7:0]     reading;
reg            start;


micro_bus_model
bus
 (
      .clk               ( clk         ),
      .reset             ( reset       ),
      .wr                ( wr          ),
      .rd                ( rd          ),
      .addr              ( addr        ),
      .wdata             ( wdata       ),
      .rdata             ( rdata[7:0] )

  );



iobuftri
data_tri_buf
  (
   .i   ( 1'b0            ),
   .oe  ( ps2_data_pad_oe ),
   .o   ( ps2_data_pad_in ),
   .pad ( ps2_data        )
   );


iobuftri
clk_tri_buf
  (
   .i   ( 1'b0           ),
   .oe  ( ps2_clk_pad_oe ),
   .o   ( ps2_clk_pad_in ),
   .pad ( ps2_clk        )
   );



pullup ua0(ps2_clk);
pullup ua1(ps2_data);


ps2_model 
#(.CLKCNT(8'h7f))
ps2_model
(  .clk                    ( clk              ),
   .reset                  ( reset            ), 
   .ps2_clk                ( ps2_clk          ),
   .ps2_data               ( ps2_data         )
);









 

