


// Instantiate one CPU to be tested.
mrisc dut(
   .clk		(clk),
   .rst_in	(reset),
   .inst_addr	(inst_addr),
   .inst_data	(inst_data),

   .portain	(portain),
   .portbin	(portbin),
   .portcin	(portcin),

   .portaout	(portaout),
   .portbout	(portbout),
   .portcout	(portcout),

   .trisa	(trisa),
   .trisb	(trisb),
   .trisc	(trisc),
   
   .tcki	(tcki),
   .wdt_en	(wdt_en)

   );



wire [7:0]	porta; // I/O Port A
wire [7:0]	portb; // I/O Port B
wire [7:0]	portc; // I/O Port C



assign     wdt_en	=1'b1;

// IO buffers for IO Ports
assign porta = trisa ? 8'bz : portaout;
assign portain = porta;

assign portb = trisb ? 8'bz : portbout;
assign portbin = portb;

assign portc = trisc ? 8'bz : portcout;
assign portcin = portc;

// Pullups for IO Ports
pullup ua0(porta[0]);
pullup ua1(porta[1]);
pullup ua2(porta[2]);
pullup ua3(porta[3]);
pullup ua4(porta[4]);
pullup ua5(porta[5]);
pullup ua6(porta[6]);
pullup ua7(porta[7]);

pullup ub0(portb[0]);
pullup ub1(portb[1]);
pullup ub2(portb[2]);
pullup ub3(portb[3]);
pullup ub4(portb[4]);
pullup ub5(portb[5]);
pullup ub6(portb[6]);
pullup ub7(portb[7]);

pullup uc0(portc[0]);
pullup uc1(portc[1]);
pullup uc2(portc[2]);
pullup uc3(portc[3]);
pullup uc4(portc[4]);
pullup uc5(portc[5]);
pullup uc6(portc[6]);
pullup uc7(portc[7]);


// Instantiate the Program RAM.
cde_sram
#(

.WORDS    ( ROM_WORDS), 
.ADDR     ( ROM_ADDR  ),  
.WIDTH    ( ROM_WIDTH ), 
.INIT_FILE( ROM_FILE)
)


 u1 (
   .clk		(clk),
   .raddr	(inst_addr),
   .waddr      (inst_addr),
   .rd          (1'b1),
   .cs          (1'b1),
   .wr		(1'b0),			// This testbench doesn't allow writing to PRAM
   .wdata		(12'b000000000000),	// This testbench doesn't allow writing to PRAM
   .rdata	(inst_data)
);

